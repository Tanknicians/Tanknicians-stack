// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id Int @id @default(autoincrement()) // DB id value for the table
  
  email    String @unique // username and where to send to reset password
  password String?
  token    String? // where we can create a synchronous login token cache
}

model Customer {
  id Int @id @default(autoincrement())

  firstName  String?
  middleName String?
  lastName   String?
  address    String?
  email      String?
  phone      Int?

  Tank      Tank[]
  Form      Form[]
}

model Employee {
  id         Int @id @default(autoincrement())
  employeeId Int @unique // their POS-style identifier

  firstName  String?
  middleName String?
  lastName   String?
  email      String?  @unique
  phone      Int?     @unique

  loggedParameters Parameter[]
  createdForms Form[]
}

model Form {
  id Int @id @default(autoincrement())
  approved Boolean @default(false)
  created DateTime @default(now())
  request String?

  customer Customer @relation(fields: [customerId], references: [id])
  customerId Int
  @@index([customerId])

  employee Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  @@index([employeeId])

  parameters Parameter[]
}

model Tank {
  id      Int      @id @default(autoincrement())
  description String? 
  size Int? // gallons/liters of water
  type String? // freshwater, brackish, saltwater, etc

  owner   Customer @relation(fields: [ownerId], references: [id])
  ownerId Int
  @@index([ownerId])

  Parameter Parameter[]
  Fish      Fish[]
  Coral     Coral[]
  Plant     Plant[]
  Pest      Pest[]
}


model Parameter {
  id Int @id @default(autoincrement())

  name             String?
  value            Float?
  recordedDateTime DateTime @default(now())

  loggedBy   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  @@index([employeeId])

  forTank Tank @relation(fields: [tankId], references: [id])
  tankId  Int
  @@index([tankId])

  inForm Form @relation(fields: [formId], references: [id])
  formId Int
  @@index([formId])
}

model Fish {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  inTank Tank   @relation(fields: [tankId], references: [id])
  tankId Int
  @@index([tankId])

  Pest   Pest[]
}

model Coral {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  inTank Tank   @relation(fields: [tankId], references: [id])
  tankId Int
  @@index([tankId])

  Pest   Pest[]
}

model Plant {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  inTank Tank   @relation(fields: [tankId], references: [id])
  tankId Int
  @@index([tankId])

  Pest   Pest[]
}

model Pest {
  id          Int      @id @default(autoincrement())
  species     String?
  description String?
  isSaltwater Boolean?

  onFish Fish? @relation(fields: [fishId], references: [id])
  fishId Int?
  @@index([fishId])

  onCoral Coral? @relation(fields: [coralId], references: [id])
  coralId Int?
  @@index([coralId])

  onPlant Plant? @relation(fields: [plantId], references: [id])
  plantId Int?
  @@index([plantId])

  inTank Tank @relation(fields: [tankId], references: [id])
  tankId Int
  @@index([tankId])
}
