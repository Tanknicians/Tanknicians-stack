// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id Int @id @default(autoincrement()) // DB id value for the table

  email    String  @unique // username and where to send to reset password
  password String?
  token    String? // where we can create a synchronous login token cache
}

model Customer {
  id Int @id @default(autoincrement())

  firstName  String?
  middleName String?
  lastName   String?
  address    String?
  email      String?
  phone      Int?

  Tanks Tank[]
  Forms Form[]
}

model Employee {
  id         Int @id @default(autoincrement())
  employeeId Int @unique // their POS-style identifier

  firstName  String?
  middleName String?
  lastName   String?
  email      String? @unique
  phone      Int?    @unique

  Forms      Form[]
  Parameters Parameters[]
}

model Form {
  id       Int      @id @default(autoincrement())
  approved Boolean  @default(false)
  created  DateTime @default(now())
  request  String?

  Customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  Employee   Employee @relation(fields: [employeeId], references: [employeeId])
  employeeId Int

  Parameters   Parameters @relation(fields: [parametersId], references: [id])
  parametersId Int        @unique

  Tank   Tank @relation(fields: [tankId], references: [id])
  tankId Int

  @@index([customerId])
  @@index([employeeId])
  @@index([parametersId])
  @@index([tankId])
}

model Tank {
  id          Int     @id @default(autoincrement())
  description String?
  size        Int? // gallons/liters of water
  type        String? // freshwater, brackish, saltwater, etc

  Customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  Form       Form[]
  Parameters Parameters[]
  Fish       Fish[]
  Coral      Coral[]
  Plant      Plant[]
  Pest       Pest[]

  @@index([customerId])
}

// update this model with the bunch of different single-tank recording of parameters
// the point of this is to mimic what parameters a tanknician may log on paper 
model Parameters {
  id       Int      @id @default(autoincrement())
  recorded DateTime @default(now())

  // possible parameter types
  nitrates Float?
  nitrites Float?
  oxygen   Float?
  salt     Float?

  Employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  Tank   Tank @relation(fields: [tankId], references: [id])
  tankId Int

  // only one set of parameters per-form (one-to-one relationship)
  Form Form?

  @@index([employeeId])
  @@index([tankId])
}

model Fish {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  Tank   Tank @relation(fields: [tankId], references: [id])
  tankId Int

  @@index([tankId])
}

model Coral {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  Tank   Tank @relation(fields: [tankId], references: [id])
  tankId Int

  @@index([tankId])
}

model Plant {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  Tank   Tank @relation(fields: [tankId], references: [id])
  tankId Int

  @@index([tankId])
}

model Pest {
  id          Int      @id @default(autoincrement())
  species     String?
  description String?
  isSaltwater Boolean?

  Tank   Tank @relation(fields: [tankId], references: [id])
  tankId Int

  @@index([tankId])
}
