// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Login {
  id Int @id @default(autoincrement()) // DB id value for the LOGIN table

  email    String @unique // username and where to send to reset password
  password String
  token    String // where the JWT token would go to auth who-is-who
}

model Employee {
  id         Int @id @default(autoincrement())
  employeeId Int @unique // their POS-style identifier

  firstName  String
  middleName String?
  lastName   String
  email      String  @unique
  phone      Int     @unique

  Forms     Form[]
  Parameter Parameter[]
}

model Customer {
  id Int @id @default(autoincrement())

  Tanks Tank[]

  firstName  String
  middleName String?
  lastName   String
  address    String
  email      String?
  phone      Int?
  Form       Form[]
}

model Form {
  id       Int      @id @default(autoincrement())
  dateTime DateTime @default(now())

  createdBy  Employee @relation(fields: employeeId, references: id)
  employeeId Int

  forCustomer Customer? @relation(fields: customerId, references: id)
  customerId  Int?

  forTank Tank @relation(fields: tankId, references: id)
  tankId  Int
}

model Tank {
  id      Int      @id @default(autoincrement())
  owner   Customer @relation(fields: ownerId, references: id)
  ownerId Int

  name String?

  Parameter Parameter[]
  Fish      Fish[]
  Coral     Coral[]
  Plant     Plant[]
  Pest      Pest[]
  Form      Form[]
}

model Parameter {
  id Int @id @default(autoincrement())

  name             String?
  value            Float?
  recordedDateTime DateTime @default(now())

  loggedBy   Employee @relation(fields: employeeId, references: id)
  employeeId Int

  forTank Tank @relation(fields: tankId, references: id)
  tankId  Int
}

model Fish {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  inTank Tank   @relation(fields: tankId, references: id)
  tankId Int
  Pest   Pest[]
}

model Coral {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  inTank Tank   @relation(fields: tankId, references: id)
  tankId Int
  Pest   Pest[]
}

model Plant {
  id          Int      @id @default(autoincrement())
  species     String?
  condition   String?
  description String?
  isSaltwater Boolean?

  inTank Tank   @relation(fields: tankId, references: id)
  tankId Int
  Pest   Pest[]
}

model Pest {
  id          Int      @id @default(autoincrement())
  species     String?
  description String?
  isSaltwater Boolean?

  onFish Fish? @relation(fields: fishId, references: id)
  fishId Int?

  onCoral Coral? @relation(fields: coralId, references: id)
  coralId Int?

  onPlant Plant? @relation(fields: plantId, references: id)
  plantId Int?

  inTank Tank @relation(fields: tankId, references: id)
  tankId Int
}
