// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  CUSTOMER
  EMPLOYEE
}

enum TankType {
  FRESH
  SALT
  BRACKISH
}

model Login {
  id   Int  @id @default(autoincrement())
  role Role // ADMIN, CUSTOMER, EMPLOYEE

  email    String @unique
  password String

  User   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@index([userId])
}


model User {
  id Int @id @default(autoincrement())

  firstName  String?
  middleName String?
  lastName   String?
  address    String?
  phone      String?

  // changed to optional; we can have User data without a Login
  login Login?
  // added Sept 11, 2023: differentiate employees from customers
  isEmployee Boolean @default(false) // don't want to accidentally create employees

  EmployeeServiceCalls ServiceCall[]
  OwnedTanks           TankMetadata[]
}

model ServiceCall {
  id Int @id @default(autoincrement())

  isApproved Boolean  @default(false) // for admin to approve the ServiceCall
  createdOn  DateTime // Required, set by mobile app.
  billed     Boolean @default(false)

  customerRequest   String?
  employeeNotes     String?
  // adding this to potentially allow messages for whomever needs to see why a service call wasn't approved
  notApprovedNotes  String?
  notesUpdated      DateTime?

  alkalinity Float
  calcium    Float
  nitrate    Float
  phosphate  Float

  ATOOperational                 Boolean
  ATOReservoirFilled             Boolean
  chemFilterAdjusted             Boolean
  doserAdjustementOrManualDosing Boolean
  dosingReservoirsFull           Boolean
  floorsCheckedForSpillsOrDirt   Boolean
  glassCleanedInside             Boolean
  glassCleanedOutside            Boolean
  mechFilterChanged              Boolean
  pumpsClearedOfDebris           Boolean
  saltCreepCleaned               Boolean
  skimmerCleanedAndOperational   Boolean
  waterChanged                   Boolean
  waterTestedRecordedDated       Boolean

  pestAPresent Boolean
  pestBPresent Boolean
  pestCPresent Boolean
  pestDPresent Boolean

  // who created the ServiceCall (a sort of employee signature)
  Employee   User @relation(fields: [employeeId], references: [id])
  employeeId Int

  // which tank it is for (which will also link to the customer)
  TankMetadata TankMetadata @relation(fields: [tankId], references: [id])
  tankId       Int

  @@index([employeeId])
  @@index([tankId])
}

model TankMetadata {
  id          Int      @id @default(autoincrement())
  description String?
  volume      Int // gallons/liters of water
  type        TankType
  
  // added Sept 11 2023
  qrSymbol    Int // integer starting from 1 to differentiate tanks for a single customer; used for qr code

  tanknicianSourcedOnly Boolean
  lastDateServiced      DateTime

  // Who owns the tank
  Customer     User          @relation(fields: [customerId], references: [id])
  customerId   Int
  // the tank's recorded ServiceCalls
  ServiceCalls ServiceCall[]

  @@index([customerId])
}
